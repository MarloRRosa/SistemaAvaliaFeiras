const express = require('express');
const session = require('express-session');
const expressLayouts = require('express-ejs-layouts');
const mongoose = require('mongoose');
const flash = require('connect-flash');
const path = require('path');
require('dotenv').config(); // <-- ADICIONADO: Carrega vari√°veis de ambiente do .env no in√≠cio

// Importa a fun√ß√£o auxiliar
const { formatarDatasParaInput } = require('./utils/helpers');

const app = express();

// =====================
// Conex√£o com MongoDB
// =====================
// Usar vari√°vel de ambiente para a URI do MongoDB (MUITO IMPORTANTE para produ√ß√£o!)
mongoose.connect(process.env.MONGO_URI || 'mongodb://127.0.0.1:27017/avaliafeiras')
    .then(() => console.log('üü¢ MongoDB conectado com sucesso!')) // Mensagem mais descritiva
    .catch(err => console.error('üî¥ Erro ao conectar ao MongoDB:', err));

// =====================
// Configura√ß√£o de View Engine (EJS + Layouts)
// =====================
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
// Define o layout padr√£o. O 'layouts/public' deve existir na sua pasta 'views'.
app.set('layout', 'layouts/public');

// =====================
// Middlewares Essenciais e de Sess√£o (Ordem Importa!)
// =====================

// Serve arquivos est√°ticos (CSS, JS, imagens) - COLOCADO MAIS PARA CIMA
// √â uma boa pr√°tica servir arquivos est√°ticos o mais cedo poss√≠vel para n√£o passar por outros middlewares.
app.use(express.static(path.join(__dirname, 'public')));

// Body Parser para lidar com dados de formul√°rio (DEVE VIR ANTES DAS ROTAS)
app.use(express.urlencoded({ extended: true })); // Para dados de formul√°rio HTML
app.use(express.json()); // Para dados JSON (se for usar APIs REST, por exemplo)

// Configura√ß√£o da Sess√£o (DEVE VIR ANTES DO FLASH E DAS ROTAS QUE USAM SESS√ÉO)
app.use(session({
    secret: process.env.SESSION_SECRET || 'sua-chave-secreta-de-desenvolvimento', // <-- USANDO VARI√ÅVEL DE AMBIENTE
    resave: false, // Geralmente 'false' para evitar salvar a sess√£o se ela n√£o foi modificada
    saveUninitialized: false, // Geralmente 'false' para evitar criar sess√µes vazias para cada visitante
    cookie: { 
        maxAge: 24 * 60 * 60 * 1000, // 24 horas
        httpOnly: true, // Garante que o cookie n√£o pode ser acessado via JavaScript do cliente
        secure: process.env.NODE_ENV === 'production' // Apenas envia cookie sobre HTTPS em produ√ß√£o
    }
}));

// Configura√ß√£o do Connect-Flash (DEVE VIR DEPOIS DA SESS√ÉO)
app.use(flash());

// Middleware para passar mensagens flash e dados do usu√°rio para as views (DEVE VIR DEPOIS DO FLASH)
app.use((req, res, next) => {
    res.locals.success_msg = req.flash('success_msg');
    res.locals.error_msg = req.flash('error_msg');
    res.locals.error = req.flash('error');
    
    // Passa o objeto do admin da escola, se logado
    res.locals.adminEscola = req.session.adminEscola || null;
    
    // Ajuste aqui: Passa um booleano indicando se o Super Admin est√° logado
    // Verifica se req.session.superAdminId existe, que √© o que o superadmin.js agora define
    res.locals.isSuperAdmin = !!req.session.superAdminId; // true se superAdminId existe, false caso contr√°rio
    
    next();
});

const methodOverride = require('method-override');
app.use(methodOverride('_method'));


// Usa express-ejs-layouts (geralmente antes das rotas, ap√≥s a configura√ß√£o do view engine e static files)
app.use(expressLayouts);

// =====================
// Adiciona fun√ß√µes auxiliares para serem usadas em templates (app.locals)
// =====================
app.locals.formatarDatasParaInput = formatarDatasParaInput;


// =====================
// Rotas
// =====================
const publicRoutes = require('./routes/public');
const superadminRoutes = require('./routes/superadmin');
const adminRoutes = require('./routes/admin');
const avaliadorRoutes = require('./routes/avaliador'); 

// Rotas principais
app.use('/', publicRoutes);
app.use('/superadmin', superadminRoutes);
app.use('/admin', adminRoutes);
app.use('/avaliador', avaliadorRoutes);

// =====================
// Rota para a raiz (melhor ter uma p√°gina inicial real aqui)
// =====================
// Se sua rota '/' em public.js j√° renderiza o index, voc√™ pode remover esta.
// Se n√£o, √© bom ter um fallback ou um redirecionamento claro.
// Exemplo: se public.js cuida de '/', remova esta.
// Se public.js N√ÉO cuida de '/', ent√£o:
// app.get('/', (req, res) => {
//     res.render('index', { titulo: 'Bem-vindo ao AvaliaFeiras' }); // Renderiza sua p√°gina inicial p√∫blica
// });


// =====================
// Inicializa√ß√£o do Servidor
// =====================
const PORT = process.env.PORT || 3000; // Usa a porta do ambiente ou 3000
app.listen(PORT, () => {
    console.log(`üöÄ Servidor rodando em http://localhost:${PORT} (${process.env.NODE_ENV || 'development'} mode)`);
});