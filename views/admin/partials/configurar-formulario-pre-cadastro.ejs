<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Configurar Formul√°rio</title>
  <style>
    * {
      margin: 0; 
      padding: 0; 
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      color: #333;
      line-height: 1.6;
      padding: 2rem 0;
    }
    
    .container {
      max-width: 900px;
      margin: 0 auto;
      padding: 0 1rem;
    }
    
    .card {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 3rem;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      animation: slideIn 0.6s ease-out;
    }
    
    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
    
    h2 {
      font-size: 2rem;
      font-weight: 700;
      margin-bottom: 2.5rem;
      color: #2d3748;
      text-align: center;
      position: relative;
    }
    
    h2::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
      width: 60px;
      height: 4px;
      background: linear-gradient(90deg, #667eea, #764ba2);
      border-radius: 2px;
    }
    
    .success-message {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 12px;
      margin-bottom: 2rem;
      border-left: 4px solid #047857;
      font-size: 0.95rem;
      font-weight: 500;
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.2);
      animation: fadeIn 0.5s ease-out;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; transform: translateX(-20px); }
      to { opacity: 1; transform: translateX(0); }
    }
    
    .section-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: #2d3748;
      margin: 2rem 0 1.5rem 0;
      padding: 0.75rem 1rem;
      background: linear-gradient(135deg, #f7fafc, #edf2f7);
      border-radius: 12px;
      border-left: 4px solid #667eea;
      position: relative;
      overflow: hidden;
    }
    
    .section-title::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, transparent, rgba(102, 126, 234, 0.05));
      pointer-events: none;
    }
    
    .section-title:first-of-type {
      margin-top: 0;
    }
    
    .fixed-field {
      background: linear-gradient(135deg, #f8fafc, #e2e8f0);
      border-radius: 16px;
      padding: 1.5rem;
      margin-bottom: 1rem;
      border: 1px solid rgba(102, 126, 234, 0.1);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
    }
    
    .fixed-field .field-row {
      border-bottom: none;
      padding: 0.75rem 0;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .fixed-label {
      font-weight: 600;
      color: #4a5568;
      font-size: 1rem;
    }
    
    .fixed-note {
      font-size: 0.85rem;
      color: #718096;
      font-style: italic;
      background: rgba(102, 126, 234, 0.1);
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      border: 1px solid rgba(102, 126, 234, 0.2);
    }
    
    .field-headers {
      display: grid;
      grid-template-columns: 2fr 1fr 2fr auto auto;
      gap: 1rem;
      padding: 1rem;
      font-size: 0.85rem;
      font-weight: 600;
      color: #4a5568;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      background: linear-gradient(135deg, #edf2f7, #e2e8f0);
      border-radius: 12px;
      margin-bottom: 1rem;
      border: 1px solid rgba(102, 126, 234, 0.1);
    }
    
    .field-row {
      display: grid;
      grid-template-columns: 2fr 1fr 2fr auto auto;
      gap: 1rem;
      align-items: center;
      padding: 1.5rem;
      border-bottom: 1px solid rgba(0, 0, 0, 0.05);
      border-radius: 12px;
      margin-bottom: 0.75rem;
      background: rgba(255, 255, 255, 0.7);
      backdrop-filter: blur(5px);
      transition: all 0.3s ease;
      border: 1px solid rgba(102, 126, 234, 0.1);
    }
    
    .field-row:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
      background: rgba(255, 255, 255, 0.9);
    }
    
    .field-row:last-child {
      border-bottom: none;
    }
    
    input[type="text"], 
    input[type="number"], 
    select {
      width: 100%;
      padding: 0.875rem 1rem;
      border: 2px solid #e2e8f0;
      border-radius: 12px;
      font-size: 0.95rem;
      transition: all 0.3s ease;
      background: rgba(255, 255, 255, 0.9);
      backdrop-filter: blur(5px);
    }
    
    input[type="text"]:focus, 
    input[type="number"]:focus, 
    select:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
      transform: translateY(-1px);
    }
    
    input[readonly] {
      background: rgba(243, 244, 246, 0.8);
      color: #6b7280;
      cursor: not-allowed;
    }
    
    .checkbox-container {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
      font-weight: 500;
      color: #4a5568;
    }
    
    input[type="checkbox"] {
      width: 20px;
      height: 20px;
      accent-color: #667eea;
      cursor: pointer;
    }
    
    .hidden {
      display: none !important;
    }
    
    .buttons {
      margin-top: 3rem;
      display: flex;
      flex-wrap: wrap;
      gap: 1rem;
      align-items: center;
      justify-content: center;
    }
    
    .btn {
      padding: 1rem 2rem;
      border: none;
      border-radius: 12px;
      font-size: 0.95rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      position: relative;
      overflow: hidden;
    }
    
    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
    }
    
    .btn:hover::before {
      left: 100%;
    }
    
    .btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
    
    .btn:active {
      transform: translateY(-1px);
    }
    
    .btn-add {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
    }
    
    .btn-add::after {
      content: '‚ú®';
      opacity: 0;
      transition: opacity 0.3s;
    }
    
    .btn-add:hover::after {
      opacity: 1;
    }
    
    .btn-save {
      background: linear-gradient(135deg, #3b82f6, #2563eb);
      color: white;
    }
    
    .btn-back {
      background: linear-gradient(135deg, #6b7280, #4b5563);
      color: white;
    }
    
    .btn-cancel {
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: white;
      padding: 0.75rem 1.5rem;
      font-size: 0.85rem;
    }
    
    .btn-cancel:hover {
      transform: translateY(-2px) scale(1.05);
    }
    
    /* Responsividade melhorada */
    @media (max-width: 768px) {
      body {
        padding: 1rem 0;
      }
      
      .container { 
        margin: 0 auto; 
        padding: 0 0.5rem;
      }
      
      .card { 
        padding: 2rem 1.5rem; 
        border-radius: 16px;
        margin: 0 0.5rem;
      }
      
      h2 {
        font-size: 1.5rem;
      }
      
      .field-row {
        grid-template-columns: 1fr;
        gap: 1rem;
        padding: 1.25rem;
      }
      
      .field-headers { 
        display: none; 
      }
      
      .buttons {
        flex-direction: column;
        align-items: stretch;
        gap: 0.75rem;
      }
      
      .btn {
        justify-content: center;
        padding: 1rem;
      }
      
      .fixed-field .field-row {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
      }
    }
    
    /* Anima√ß√µes adicionais */
    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.05); }
    }
    
    .btn-add:hover {
      animation: pulse 0.6s ease-in-out;
    }
    
    /* Melhorias de acessibilidade */
    .btn:focus {
      outline: 3px solid rgba(102, 126, 234, 0.5);
      outline-offset: 2px;
    }
    
    input:focus, select:focus {
      outline: 2px solid rgba(102, 126, 234, 0.5);
      outline-offset: 2px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="card">
      <h2>Configurar Formul√°rio de Pr√©-Cadastro</h2>

      <% if (success_msg) { %>
        <div class="success-message"><%= success_msg %></div>
      <% } %>

      <form action="/admin/formulario-pre-cadastro/configurar" method="POST" id="formCamposExtras">

        <div class="section-title">üìã Campos Obrigat√≥rios</div>
        <div class="fixed-field">
          <div class="field-row">
            <div class="fixed-label">Nome</div>
            <div class="fixed-note">Campo fixo obrigat√≥rio</div>
          </div>
          <div class="field-row">
            <div class="fixed-label">Email</div>
            <div class="fixed-note">Campo fixo obrigat√≥rio</div>
          </div>
        </div>

        <div class="section-title">‚öôÔ∏è Campos Personalizados</div>
        <div class="field-headers">
          <div>Nome do Campo</div>
          <div>Tipo</div>
          <div>Op√ß√µes</div>
          <div>Obrigat√≥rio</div>
          <div>A√ß√µes</div>
        </div>

        <div id="campos-container">
          <% if (camposExtras && camposExtras.length > 0) { %>
            <% camposExtras.forEach((campo, idx) => { %>
              <div class="field-row">
                <input type="text" name="camposExtras[<%= idx %>][label]" value="<%= campo.label %>" placeholder="Nome do Campo" required>
                <select name="camposExtras[<%= idx %>][tipo]" onchange="toggleOpcoes(this, '<%= idx %>')" class="tipo-select" data-idx="<%= idx %>">
                  <option value="texto"   <%= campo.tipo === 'texto' ? 'selected' : '' %>>Texto</option>
                  <option value="n√∫mero"  <%= campo.tipo === 'n√∫mero' ? 'selected' : '' %>>N√∫mero</option>
                  <option value="sele√ß√£o" <%= campo.tipo === 'sele√ß√£o' ? 'selected' : '' %>>Sele√ß√£o</option>
                </select>
                <input type="text" name="camposExtras[<%= idx %>][opcoes]" id="opcoes_<%= idx %>" value="<%= campo.opcoes || '' %>" placeholder="Op√ß√µes separadas por v√≠rgula" class="<%= campo.tipo === 'sele√ß√£o' ? '' : 'hidden' %>">
                <div class="checkbox-container">
                  <input type="checkbox" name="camposExtras[<%= idx %>][obrigatorio]" value="true" <%= campo.obrigatorio ? 'checked' : '' %>>
                  <label>Obrigat√≥rio</label>
                </div>
                <button type="button" class="btn btn-cancel" onclick="this.parentElement.remove()">üóëÔ∏è Excluir</button>
              </div>
            <% }) %>
          <% } %>
        </div>

        <div class="buttons">
          <button type="button" onclick="adicionarCampo()" class="btn btn-add">‚ûï Adicionar Campo</button>
          <button type="submit" class="btn btn-save">üíæ Salvar Configura√ß√£o</button>
          <a href="/admin/dashboard" class="btn btn-back">üè† Voltar para Dashboard</a>
        </div>
      </form>
    </div>
  </div>

  <script>
    function adicionarCampo() {
      const container = document.getElementById('campos-container');
      const existingFields = container.querySelectorAll('.field-row').length;
      const idx = existingFields;

      const newField = document.createElement('div');
      newField.className = 'field-row';
      newField.style.opacity = '0';
      newField.style.transform = 'translateY(20px)';
      
      newField.innerHTML = `
        <input type="text" name="camposExtras[${idx}][label]" placeholder="Nome do Campo" required>
        <select name="camposExtras[${idx}][tipo]" onchange="toggleOpcoes(this, ${idx})" class="tipo-select" data-idx="${idx}">
          <option value="texto">Texto</option>
          <option value="n√∫mero">N√∫mero</option>
          <option value="sele√ß√£o">Sele√ß√£o</option>
        </select>
        <input type="text" name="camposExtras[${idx}][opcoes]" id="opcoes_${idx}" placeholder="Op√ß√µes separadas por v√≠rgula" class="hidden">
        <div class="checkbox-container">
          <input type="checkbox" name="camposExtras[${idx}][obrigatorio]" value="true">
          <label>Obrigat√≥rio</label>
        </div>
        <button type="button" class="btn btn-cancel" onclick="this.parentElement.remove()">üóëÔ∏è Excluir</button>
      `;
      
      container.appendChild(newField);
      
      // Anima√ß√£o de entrada
      setTimeout(() => {
        newField.style.transition = 'all 0.3s ease';
        newField.style.opacity = '1';
        newField.style.transform = 'translateY(0)';
      }, 10);
    }

    function toggleOpcoes(select, idx) {
      const input = document.getElementById('opcoes_' + idx);
      if (select.value === 'sele√ß√£o') {
        input.classList.remove('hidden');
        input.focus();
      } else {
        input.classList.add('hidden');
        input.value = '';
      }
    }

    // Adicionar anima√ß√£o de loading no submit
    document.getElementById('formCamposExtras').addEventListener('submit', function(e) {
      const submitBtn = this.querySelector('.btn-save');
      submitBtn.innerHTML = '‚è≥ Salvando...';
      submitBtn.disabled = true;
    });
  </script>
</body>
</html>